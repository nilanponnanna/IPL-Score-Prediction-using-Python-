import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error as mae, mean_squared_error as mse
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
import matplotlib.pyplot as plt

np.__version__

# Importing dataset
data = pd.read_csv('/content/data.csv')
print(f"Dataset successfully Imported of Shape : {data.shape}")
data.head()
data.describe()
data.info()
data.nunique()
data.dtypes
data.columns

# Dropping irrelevant columns
irrelevant = ['mid', 'date', 'venue','batsman', 'bowler', 'striker', 'non-striker']
print(f'Before Removing Irrelevant Columns : {data.shape}')
data = data.drop(irrelevant, axis=1)
print(f'After Removing Irrelevant Columns : {data.shape}')
data.head()

# Filtering for consistent teams
const_teams = ['Kolkata Knight Riders', 'Chennai Super Kings', 'Rajasthan Royals',
              'Mumbai Indians', 'Kings XI Punjab', 'Royal Challengers Bangalore',
              'Delhi Daredevils', 'Sunrisers Hyderabad']
print(f'Before Removing Inconsistent Teams : {data.shape}')
data = data[(data['batting_team'].isin(const_teams)) & (data['bowling_team'].isin(const_teams))]
print(f'After Removing Inconsistent Teams : {data.shape}')
print(f"Consistent Teams : \n{data['batting_team'].unique()}")
data.head()

# Filtering for overs
print(f'Before Removing Overs : {data.shape}')
data = data[data['overs'] >= 5.0]
print(f'After Removing Overs : {data.shape}')
data.head()

# One-hot encoding categorical columns
data['batting_team'] = data['batting_team'].astype('category')
data['bowling_team'] = data['bowling_team'].astype('category')

# Encode team names to numeric codes
le = LabelEncoder()
for col in ['batting_team', 'bowling_team']:
  data[col] = le.fit_transform(data[col])
data.head()

# OneHotEncoder
columnTransformer = ColumnTransformer([('encoder', OneHotEncoder(), [0, 1])], remainder='passthrough')
data = np.array(columnTransformer.fit_transform(data))

# Define columns
cols = ['batting_team_Chennai Super Kings', 'batting_team_Delhi Daredevils', 'batting_team_Kings XI Punjab',
        'batting_team_Kolkata Knight Riders', 'batting_team_Mumbai Indians', 'batting_team_Rajasthan Royals',
        'batting_team_Royal Challengers Bangalore', 'batting_team_Sunrisers Hyderabad',
        'bowling_team_Chennai Super Kings', 'bowling_team_Delhi Daredevils', 'bowling_team_Kings XI Punjab',
        'bowling_team_Kolkata Knight Riders', 'bowling_team_Mumbai Indians', 'bowling_team_Rajasthan Royals',
        'bowling_team_Royal Challengers Bangalore', 'bowling_team_Sunrisers Hyderabad', 'runs', 'wickets', 'overs',
        'runs_last_5', 'wickets_last_5', 'total']

# Create DataFrame
df = pd.DataFrame(data, columns=cols)
df.head()

# Splitting data into features and labels
features = df.drop(['total'], axis=1)
labels = df['total']
train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size=0.20, shuffle=True)
print(f"Training Set : {train_features.shape}\nTesting Set : {test_features.shape}")

# Training the Random Forest Regressor
forest = RandomForestRegressor()
forest.fit(train_features, train_labels)

# Scoring the model
train_score_forest = str(forest.score(train_features, train_labels) * 100)
test_score_forest = str(forest.score(test_features, test_labels) * 100)
print(f'Train Score : {train_score_forest[:5]}%\nTest Score : {test_score_forest[:5]}%')

# Model evaluation
print("---- Random Forest Regression - Model Evaluation ----")
print("Mean Absolute Error (MAE): {}".format(mae(test_labels, forest.predict(test_features))))
print("Mean Squared Error (MSE): {}".format(mse(test_labels, forest.predict(test_features))))
print("Root Mean Squared Error (RMSE): {}".format(np.sqrt(mse(test_labels, forest.predict(test_features)))))

# Prediction function
def predict_score(batting_team, bowling_team, runs, wickets, overs, runs_last_5, wickets_last_5, model=forest):
  prediction_array = []
  # Batting Team
  if batting_team == 'Chennai Super Kings':
    prediction_array = prediction_array + [1,0,0,0,0,0,0,0]
  elif batting_team == 'Delhi Daredevils':
    prediction_array = prediction_array + [0,1,0,0,0,0,0,0]
  elif batting_team == 'Kings XI Punjab':
    prediction_array = prediction_array + [0,0,1,0,0,0,0,0]
  elif batting_team == 'Kolkata Knight Riders':
    prediction_array = prediction_array + [0,0,0,1,0,0,0,0]
  elif batting_team == 'Mumbai Indians':
    prediction_array = prediction_array + [0,0,0,0,1,0,0,0]
  elif batting_team == 'Rajasthan Royals':
    prediction_array = prediction_array + [0,0,0,0,0,1,0,0]
  elif batting_team == 'Royal Challengers Bangalore':
    prediction_array = prediction_array + [0,0,0,0,0,0,1,0]
  elif batting_team == 'Sunrisers Hyderabad':
    prediction_array = prediction_array + [0,0,0,0,0,0,0,1]
  # Bowling Team
  if bowling_team == 'Chennai Super Kings':
    prediction_array = prediction_array + [1,0,0,0,0,0,0,0]
  elif bowling_team == 'Delhi Daredevils':
    prediction_array = prediction_array + [0,1,0,0,0,0,0,0]
  elif bowling_team == 'Kings XI Punjab':
    prediction_array = prediction_array + [0,0,1,0,0,0,0,0]
  elif bowling_team == 'Kolkata Knight Riders':
    prediction_array = prediction_array + [0,0,0,1,0,0,0,0]
  elif bowling_team == 'Mumbai Indians':
    prediction_array = prediction_array + [0,0,0,0,1,0,0,0]
  elif bowling_team == 'Rajasthan Royals':
    prediction_array = prediction_array + [0,0,0,0,0,1,0,0]
  elif bowling_team == 'Royal Challengers Bangalore':
    prediction_array = prediction_array + [0,0,0,0,0,0,1,0]
  elif bowling_team == 'Sunrisers Hyderabad':
    prediction_array = prediction_array + [0,0,0,0,0,0,0,1]
  prediction_array = prediction_array + [runs, wickets, overs, runs_last_5, wickets_last_5]
  prediction_array = np.array([prediction_array])
  pred = model.predict(prediction_array)
  return int(round(pred[0]))

def predict_winner(batting_team, bowling_team, batting_team_runs, batting_team_wickets, batting_team_overs, batting_team_runs_last_5, batting_team_wickets_last_5,
                   bowling_team_runs, bowling_team_wickets, bowling_team_overs, bowling_team_runs_last_5, bowling_team_wickets_last_5):

  batting_team_score = predict_score(batting_team, bowling_team, batting_team_runs, batting_team_wickets, batting_team_overs, batting_team_runs_last_5, batting_team_wickets_last_5)
  bowling_team_score = predict_score(bowling_team, batting_team, bowling_team_runs, bowling_team_wickets, bowling_team_overs, bowling_team_runs_last_5, bowling_team_wickets_last_5)

  print(f"{batting_team} Predicted Score: {batting_team_score}")
  print(f"{bowling_team} Predicted Score: {bowling_team_score}")

  if batting_team_score > bowling_team_score:
    winner = batting_team
  else:
    winner = bowling_team

  return winner, batting_team_score, bowling_team_score


# Input team names
batting_team = input("Enter the name of the batting team: ")
bowling_team = input("Enter the name of the bowling team: ")

# Input the team details once
batting_team_runs = float(input(f"Enter {batting_team} Runs: "))
batting_team_wickets = int(input(f"Enter {batting_team} Wickets: "))
batting_team_overs = float(input(f"Enter {batting_team} Overs: "))
batting_team_runs_last_5 = float(input(f"Enter {batting_team} Runs in last 5 overs: "))
batting_team_wickets_last_5 = int(input(f"Enter {batting_team} Wickets in last 5 overs: "))

bowling_team_runs = float(input(f"Enter {bowling_team} Runs: "))
bowling_team_wickets = int(input(f"Enter {bowling_team} Wickets: "))
bowling_team_overs = float(input(f"Enter {bowling_team} Overs: "))
bowling_team_runs_last_5 = float(input(f"Enter {bowling_team} Runs in last 5 overs: "))
bowling_team_wickets_last_5 = int(input(f"Enter {bowling_team} Wickets in last 5 overs: "))

# Predict the winner
winner, batting_team_score, bowling_team_score = predict_winner(batting_team, bowling_team, batting_team_runs, batting_team_wickets, batting_team_overs,
                                                                batting_team_runs_last_5, batting_team_wickets_last_5,
                                                                bowling_team_runs, bowling_team_wickets, bowling_team_overs,
                                                                bowling_team_runs_last_5, bowling_team_wickets_last_5)

# Print the result
print(f"The predicted winner is {winner} with scores {batting_team}: {batting_team_score} and {bowling_team}: {bowling_team_score}")
